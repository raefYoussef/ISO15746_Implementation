Model OPLmetamodel

This model description is not a real EMF artifact. It was generated by the
org.eclipse.emf.examples.generator.validator plug-in to illustrate how EMF's
code generator can be extended.
This can be disabled with -vmargs -Dorg.eclipse.emf.examples.generator.validator=false.

Package OPLmetamodel <https://oplmetamodel.com>

  Class AbstractBinaryOperator

  Class AbstractType

  Class ActivityDeclaration -> Declaration
    Reference duration : Number<<1..1>>
    Attribute earliestStartTime : Timepoint
    Attribute latestEndTime : Timepoint

  Class AggregateExp -> Expression
    Attribute op : AggOp<<1..1>>
    Reference parameters : FormalParameter<<1..*>>
    Reference body : Expression<<1..1>>

  Class AllExpression
    Reference qualifiers : FormalParameter<<1..*>>
    Reference body : Expression<<1..1>>

  Class ArrayDereference -> PathExpression
    Reference array : PathExpression<<1..1>>
    Reference index : Expression<<1..*>>

  Class ArraySlotConstraint -> Expression
    Reference target : ArrayDereference<<1..1>>

  Class ArrayType -> DefinedType
    Reference baseType : AbstractType<<1..1>>
    Reference subscripts : DataRef<<1..*>>

  Class ArrayValue -> Expression
    Reference items : Expression<<0..*>>

  Class Assertion -> Declaration
    Reference exp : Constraint<<1..1>>

  Class BinaryExpression -> Expression
    Reference lhs : Expression<<1..1>>
    Reference rhs : Expression<<1..1>>
    Reference op : AbstractBinaryOperator<<1..1>>

  Class BinaryOperator -> AbstractBinaryOperator
    Attribute op : BinaryOp<<1..1>>

  Class BindingRef -> Reference

  Class BlockExpression -> Expression
    Reference blocks : BooleanBlock<<1..1>>

  Class BooleanBlock

  Class BooleanExpression -> PrimitiveExpression
    Attribute body : EString<<1..1>>

  Class BooleanType -> PrimitiveType

  Class BuiltInFunction -> Function

  Class CollectionExpression -> Expression
    Attribute isUnique : EBoolean<<1..1>>

  Class Constraint -> Declaration
    Attribute name : EString
    Reference exp : Expression<<1..1>>

  Class Comprehension -> CollectionExpression

  Class CumulativeFunction -> Function

  Class DataDeclaration -> Declaration
    Reference variable : DataRef<<1..1>>
    Reference type : AbstractType<<1..1>>
    Attribute isDecisionVar : EBoolean<<1..1>>
    Attribute isDecisionExpr : EBoolean<<1..1>>
    Reference value : Initialization
    Reference valueConstraint : Expression

  Class DataInitMethods

  Class DataObject -> Initialization
    Attribute body : EString<<1..1>>

  Class DataRef -> Reference

  Class Declaration
    Attribute order : EInt<<1..1>>

  Class DeferredInit

  Class DefinedType -> AbstractType, Declaration

  Class DisplayInstruction
    Reference exps : Expression<<0..*>>
    Reference parameters : ParameterDeclaration<<0..*>>

  Class EnumerationType -> SetType
    Reference redefinedBaseType : EnumLiteral<<1..1>>

  Class EnumLiteral -> PrimitiveType, PrimitiveExpression

  Class Entity

  Class Error

  Class Expression

  Class FloatRangeType -> FloatType, RangeType

  Class FloatType -> NumericType

  Class FormalParameter
    Reference domain : ParameterDomain<<1..1>>
    Reference boundVars : BindingRef<<0..*>>
    Attribute isOrdered : EBoolean<<1..1>>
    Reference require : Expression

  Class Extension -> CollectionExpression
    Reference exps : Expression<<0..*>>

  Class FloatExpression -> NumericExpression
    Attribute body : EString<<1..1>>

  Class ForAllConstraint -> Constraint
    Reference qualifiers : FormalParameter<<1..*>>
    Reference exps : Constraint<<1..*>>

  Class Function -> Declaration
    Reference name : FunctionRef<<1..1>>
    Reference body : Expression<<1..1>>
    Reference parameters : Reference<<0..*>>

  Class FunctionCall -> PathExpression
    Attribute functionName : Identifier<<1..1>>
    Reference args : Expression<<0..*>>

  Class FunctionRef
    Attribute name : EString<<1..1>>

  Class IfConstraint -> Constraint
    Reference test : BooleanExpression<<1..1>>
    Reference then : Constraint<<1..1>>
    Reference else : Constraint

  Class IfExpression -> Expression
    Reference test : BooleanExpression<<1..1>>
    Reference then : Expression<<1..1>>
    Reference else : Expression

  Class In

  Class IntegerType -> NumericType

  Class Initialization

  Class Interval
    Attribute isOptional : EBoolean<<1..1>>
    Reference bounds : RangeType<<1..1>>
    Reference size : NumericType<<1..1>>
    Reference intensity : StepFunction<<1..1>>

  Class IntegerExpression -> NumericExpression
    Attribute body : EString<<1..1>>

  Class IntegerRangeType -> IntegerType, RangeType

  Class IndexValuePair -> Expression
    Reference index : Expression<<1..1>>
    Reference value : Expression<<1..1>>

  Class Model
    Attribute id : Identifier
    Attribute isConstraintProblem : EBoolean<<1..1>>
    Reference types : DefinedType<<0..*>>
    Reference data : DataDeclaration<<0..*>>
    Reference constraints : Constraint<<0..*>>
    Reference instruction : Objective<<1..1>>
    Reference functions : Function<<0..*>>
    Reference activities : ActivityDeclaration<<0..*>>
    Reference resources : ResourceDeclaration
    Reference assertions : Constraint<<0..*>>
    Reference scheduleInit : ScheduleInitialization<<0..*>>
    Reference scripts : Script<<0..*>>
    Reference settings : Setting<<0..*>>
    Reference declarations : Declaration<<0..*>>
    Reference search : SearchProcedure

  Class Number

  Class NumericExpression -> PrimitiveExpression

  Class NumericType -> PrimitiveType

  Class Objective -> Declaration
    Attribute action : OptimizationMode<<1..1>>
    Reference expression : Expression<<1..1>>
    Attribute isLinearRelaxation : EBoolean<<1..1>>

  Class Operator

  Class ParameterDeclaration

  Class ParameterDomain

  Class ParameterRef -> Reference

  Class PathDereference -> PathExpression
    Reference deref : Reference<<1..1>>
    Reference base : PathExpression

  Class PathExpression -> Expression

  Class PiecewiseExpression

  Class PiecewiseLinearFunction -> Function

  Class PositiveFloatType -> FloatType

  Class PrimitiveExpression -> Expression

  Class PrimitiveType -> AbstractType

  Class PositiveIntegerType -> IntegerType

  Class QueryUser -> DataInitMethods
    Attribute ask : EString<<1..1>>

  Class RangeExpression -> NumericExpression
    Reference lowerLimit : NumericExpression<<1..1>>
    Reference upperLimit : NumericExpression<<1..1>>
    Reference type : NumericType

  Class RangeType -> SetType
    Reference upperBound : NumericType<<1..1>>
    Reference lowerBound : NumericType<<1..1>>

  Class ReadFile -> DataInitMethods
    Attribute /path : EString<<1..1>>

  Class Record -> ParameterDomain, DefinedType
    Attribute name : Identifier<<1..1>>
    Reference fields : RecordField<<0..*>>
    Attribute isTuple : EBoolean<<1..1>>

  Class RecordField
    Attribute name : Identifier<<1..1>>
    Reference type : AbstractType<<1..1>>

  Class RecordValue -> Expression
    Reference fieldPairs : IndexValuePair<<0..*>>

  Class Reference -> Expression
    Attribute name : Identifier<<1..1>>

  Class ReflectiveFunction -> BuiltInFunction

  Class RelationalExpression -> BinaryExpression, BooleanExpression
    Attribute redefinedOp : RelationalOp<<1..1>>

  Class RelationalInit -> Initialization
    Reference bindingVar : BindingRef<<1..1>>
    Reference sources : VariableBinding<<1..1>>
    Reference relation : RelationalExpression<<1..1>>

  Class RelationalOperator -> AbstractBinaryOperator
    Attribute op : RelationalOp<<1..1>>

  Class ResourceDeclaration -> Declaration

  Class ScheduleInitialization -> Declaration

  Class Script -> Declaration
    Reference id : Reference
    Attribute isMain : EBoolean<<1..1>>
    Reference statements : ScriptStatement<<1..*>>

  Class ScriptStatement

  Class SearchProcedure

  Class Sequence
    Reference intervals : Interval<<2..*>>
    Reference types : DefinedType<<1..1>>

  Class Setting -> Declaration

  Class SetType -> DefinedType, ParameterDomain
    Attribute name : Identifier
    Reference baseType : AbstractType<<1..1>>
    Reference elements : Entity<<0..*>>

  Class SetValue -> Expression
    Reference items : Expression<<0..*>>

  Class StateFunction -> Function
    Reference transitionMatrix : SetType

  Class StepFunction -> PiecewiseLinearFunction

  Class StringExpression -> PrimitiveExpression
    Attribute body : EString<<1..1>>

  Class StringType -> PrimitiveType

  Class TupleBinding
    Reference vars : BindingRef<<1..*>>

  Class UnaryExpression -> Expression
    Reference exp : Expression<<1..1>>
    Attribute op : UnaryOp<<1..1>>

  Class VariableBinding
    Reference vars : BindingRef<<1..*>>
    Reference domain : Expression<<1..1>>

  Class Writeln -> ScriptStatement
    Attribute string : EString<<1..1>>
    Attribute arg : Identifier<<1..1>>

  Enum AggOp
    Literal sum = 0
    Literal min = 0
    Literal max = 0
    Literal prod = 0
    Literal inter = 0
    Literal union = 0
    Literal or = 0
    Literal and = 0

  Enum BinaryOp
    Literal add = 0
    Literal subtract = 0
    Literal multiply = 0
    Literal divide = 0
    Literal percent = 0
    Literal mod = 0
    Literal inter = 0
    Literal union = 0
    Literal diff = 0
    Literal symdiff = 0
    Literal power = 0

  Enum LogicalOp
    Literal negation = 0
    Literal disjunction = 0
    Literal or = 0
    Literal and = 0
    Literal conjunction = 0

  Enum MembershipOp
    Literal in = 0
    Literal not_in = 0
    Literal or = 0
    Literal and = 0
    Literal conjunction = 0

  Enum OptimizationMode
    Literal minimize = 0
    Literal maximize = 0
    Literal solve = 0

  Enum Quantifier
    Literal forAll = 0

  Enum RelationalOp
    Literal greaterThan = 0
    Literal greaterThanOrEqualTo = 0
    Literal lessThan = 0
    Literal lessThanOrEqualTo = 0
    Literal equalTo = 0
    Literal notEqualTo = 0

  Enum SetOp
    Literal symdiff = 0
    Literal diff = 0
    Literal union = 0
    Literal inter = 0

  Enum UnaryOp
    Literal unaryMinus = 0
    Literal negate = 0

  DataType Identifier <java.lang.String>

  DataType Timepoint <java.text.SimpleDateFormat>
